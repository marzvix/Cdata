!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADDRESS	cbs.h	/^	ADDRESS,$/;"	e	enum:elements
ADDRESS	cbs_data_el_list.h	/^	 ADDRESS,$/;"	e	enum:elements
ADR	btree.h	5;"	d
ALT_BS	keys.h	11;"	d
AMD_EXPENDED	cbs_data_el_list.h	/^	 AMD_EXPENDED,$/;"	e	enum:elements
AMT_DUE	cbs.h	/^	AMT_DUE,$/;"	e	enum:elements
AMT_DUE	cbs_data_el_list.h	/^	 AMT_DUE,$/;"	e	enum:elements
AMT_EXPENDED	cbs.h	/^	AMT_EXPENDED,$/;"	e	enum:elements
APPLICATION_H	cbs.h	3;"	d
ASSIGNMENTS	cbs.h	/^	ASSIGNMENTS,$/;"	e	enum:files
ASSIGNMENTS	cbs_file_specs.h	/^	ASSIGNMENTS				$/;"	e	enum:files
BELL	keys.h	6;"	d
BS	keys.h	52;"	d
BTREE	btree.h	/^} BTREE;$/;"	t	typeref:struct:treenode
CDATA_H	cdata.h	6;"	d
CITY	cbs.h	/^	CITY,$/;"	e	enum:elements
CITY	cbs_data_el_list.h	/^	 CITY,$/;"	e	enum:elements
CLIENTS	cbs.h	/^	CLIENTS,$/;"	e	enum:files
CLIENTS	cbs_file_specs.h	/^	CLIENTS,$/;"	e	enum:files
CLIENT_NAME	cbs.h	/^	CLIENT_NAME,$/;"	e	enum:elements
CLIENT_NAME	cbs_data_el_list.h	/^	 CLIENT_NAME,$/;"	e	enum:elements
CLIENT_NO	cbs.h	/^	CLIENT_NO=1,$/;"	e	enum:elements
CLIENT_NO	cbs_data_el_list.h	/^	 CLIENT_NO=1,$/;"	e	enum:elements
CONSULTANTS	cbs.h	/^	CONSULTANTS,$/;"	e	enum:files
CONSULTANTS	cbs_file_specs.h	/^	CONSULTANTS,$/;"	e	enum:files
CONSULTANT_NAME	cbs.h	/^	CONSULTANT_NAME,$/;"	e	enum:elements
CONSULTANT_NAME	cbs_data_el_list.h	/^	 CONSULTANT_NAME,$/;"	e	enum:elements
CONSULTANT_NO	cbs.h	/^	CONSULTANT_NO,$/;"	e	enum:elements
CONSULTANT_NO	cbs_data_el_list.h	/^	 CONSULTANT_NO,$/;"	e	enum:elements
CTRL_INS	keys.h	13;"	d
DATE_PAID	cbs.h	/^	DATE_PAID,$/;"	e	enum:elements
DATE_PAID	cbs_data_el_list.h	/^	 DATE_PAID$/;"	e	enum:elements
DBFILE	cbs.h	/^} DBFILE;$/;"	t	typeref:enum:files
DBFILE	cbs_file_specs.h	/^} DBFILE;$/;"	t	typeref:enum:files
DBFILE	cdata.h	/^typedef int DBFILE;$/;"	t
DEL	keys.h	58;"	d
DN	keys.h	55;"	d
D_BOF	cdata.h	/^    D_BOF,    \/* beggining of file *\/$/;"	e	enum:dberrors
D_DUPL	cdata.h	/^    D_DUPL,   \/* primary key already exists *\/$/;"	e	enum:dberrors
D_EOF	cdata.h	/^    D_EOF,    \/* end of file *\/$/;"	e	enum:dberrors
D_INDXC	cdata.h	/^    D_INDXC,  \/* index corrupted *\/$/;"	e	enum:dberrors
D_IOERR	cdata.h	/^    D_IOERR   \/* io error *\/$/;"	e	enum:dberrors
D_NF	cdata.h	/^    D_NF=1,   \/* record not found *\/$/;"	e	enum:dberrors
D_OM	cdata.h	/^    D_OM,     \/* out of memory *\/$/;"	e	enum:dberrors
D_PRIOR	cdata.h	/^    D_PRIOR,  \/* no prior record for this request *\/$/;"	e	enum:dberrors
ELEMENT	cbs.h	/^} ELEMENT;$/;"	t	typeref:enum:elements
ELEMENT	cbs_data_el_list.h	/^} ELEMENT;$/;"	t	typeref:enum:elements
ELEMENT	cdata.h	/^typedef int ELEMENT;$/;"	t
END	keys.h	54;"	d
ERROR	cdata.h	18;"	d
ESC	keys.h	9;"	d
EXPENSE	cbs.h	/^	EXPENSE,$/;"	e	enum:elements
EXPENSE	cbs_data_el_list.h	/^	 EXPENSE,$/;"	e	enum:elements
F1	keys.h	16;"	d
F10	keys.h	25;"	d
F2	keys.h	17;"	d
F3	keys.h	18;"	d
F4	keys.h	19;"	d
F5	keys.h	20;"	d
F6	keys.h	21;"	d
F7	keys.h	22;"	d
F8	keys.h	23;"	d
F9	keys.h	24;"	d
FALSE	cdata.h	24;"	d
FHEADER	datafile.h	/^} FHEADER;$/;"	t	typeref:struct:fhdr
FWD	keys.h	53;"	d
HEADER	btree.h	/^} HEADER;$/;"	t	typeref:struct:treehdr
HOME	keys.h	49;"	d
HOURS	cbs.h	/^	HOURS,$/;"	e	enum:elements
HOURS	cbs_data_el_list.h	/^	 HOURS,$/;"	e	enum:elements
HT	keys.h	8;"	d
INS	keys.h	57;"	d
KEYS_H	keys.h	4;"	d
MXCAT	cdata.h	12;"	d
MXELE	cdata.h	9;"	d
MXFILS	cdata.h	8;"	d
MXINDEX	cdata.h	10;"	d
MXKEYLEN	cdata.h	11;"	d
MXTREES	btree.h	3;"	d
NAMELEN	cdata.h	13;"	d
NODE	btree.h	4;"	d
OK	cdata.h	20;"	d
PAYMENT	cbs.h	/^	PAYMENT,$/;"	e	enum:elements
PAYMENT	cbs_data_el_list.h	/^	 PAYMENT,$/;"	e	enum:elements
PGDN	keys.h	56;"	d
PGUP	keys.h	51;"	d
PHONE	cbs.h	/^	PHONE,$/;"	e	enum:elements
PHONE	cbs_data_el_list.h	/^	 PHONE,$/;"	e	enum:elements
PROJECTS	cbs.h	/^	PROJECTS,$/;"	e	enum:files
PROJECTS	cbs_file_specs.h	/^	PROJECTS,$/;"	e	enum:files
PROJECT_NAME	cbs.h	/^	PROJECT_NAME,$/;"	e	enum:elements
PROJECT_NAME	cbs_data_el_list.h	/^	 PROJECT_NAME,$/;"	e	enum:elements
PROJECT_NO	cbs.h	/^	PROJECT_NO,$/;"	e	enum:elements
PROJECT_NO	cbs_data_el_list.h	/^	 PROJECT_NO,$/;"	e	enum:elements
RATE	cbs.h	/^	RATE,$/;"	e	enum:elements
RATE	cbs_data_el_list.h	/^	 RATE,$/;"	e	enum:elements
RPTR	cdata.h	/^typedef long RPTR;        \/* B-tree node and file address   *\/$/;"	t
RUBOUT	keys.h	7;"	d
SCREEN_H	screen.h	4;"	d
SHIFT_DEL	keys.h	12;"	d
SHIFT_INS	keys.h	14;"	d
STATE	cbs.h	/^	STATE,$/;"	e	enum:elements
STATE	cbs_data_el_list.h	/^	 STATE,$/;"	e	enum:elements
SYS_H	sys.h	4;"	d
TRUE	cdata.h	23;"	d
TermElement	cbs.h	/^	TermElement = 32367$/;"	e	enum:elements
TermFile	cbs.h	/^	TermFile = 32367$/;"	e	enum:files
UP	keys.h	50;"	d
ZIP	cbs.h	/^	ZIP,$/;"	e	enum:elements
ZIP	cbs_data_el_list.h	/^	 ZIP,$/;"	e	enum:elements
address	cbs.h	/^	char address [26];$/;"	m	struct:clients
address	cbs_file_rec_stru.h	/^    char address           [26];$/;"	m	struct:clients
amt_due	cbs.h	/^	char amt_due [9];$/;"	m	struct:clients
amt_due	cbs_file_rec_stru.h	/^    char amt_due            [9];$/;"	m	struct:clients
amt_expended	cbs.h	/^	char amt_expended [9];$/;"	m	struct:projects
amt_expended	cbs_file_rec_stru.h	/^    char amt_expended      [10];$/;"	m	struct:clients
amt_expended	cbs_file_rec_stru.h	/^    char amt_expended      [10];$/;"	m	struct:projects
assignments	cbs.h	/^struct assignments {$/;"	s
assignments	cbs_file_rec_stru.h	/^struct assignments {$/;"	s
city	cbs.h	/^	char city [26];$/;"	m	struct:clients
city	cbs_file_rec_stru.h	/^    char city              [26];$/;"	m	struct:clients
client_name	cbs.h	/^	char client_name [26];$/;"	m	struct:clients
client_name	cbs_file_rec_stru.h	/^    char client_name       [26];$/;"	m	struct:clients
client_no	cbs.h	/^	char client_no [6];$/;"	m	struct:clients
client_no	cbs.h	/^	char client_no [6];$/;"	m	struct:projects
client_no	cbs_file_rec_stru.h	/^	char client_no          [6];$/;"	m	struct:projects
client_no	cbs_file_rec_stru.h	/^    char client_no          [6];$/;"	m	struct:clients
clients	cbs.h	/^struct clients {$/;"	s
clients	cbs_file_rec_stru.h	/^struct clients {$/;"	s
consultant_name	cbs.h	/^	char consultant_name [26];$/;"	m	struct:consultants
consultant_name	cbs_file_rec_stru.h	/^    char consultant_name   [26];$/;"	m	struct:clients
consultant_name	cbs_file_rec_stru.h	/^    char consultant_name   [26];$/;"	m	struct:consultants
consultant_no	cbs.h	/^	char consultant_no [6];$/;"	m	struct:assignments
consultant_no	cbs.h	/^	char consultant_no [6];$/;"	m	struct:consultants
consultant_no	cbs_file_rec_stru.h	/^    char consultant_no      [6];$/;"	m	struct:assignments
consultant_no	cbs_file_rec_stru.h	/^    char consultant_no      [6];$/;"	m	struct:clients
consultant_no	cbs_file_rec_stru.h	/^    char consultant_no      [6];$/;"	m	struct:consultants
consultants	cbs.h	/^struct consultants {$/;"	s
consultants	cbs_file_rec_stru.h	/^struct consultants {$/;"	s
date_paid	cbs.h	/^	char date_paid [7];$/;"	m	struct:clients
date_paid	cbs_file_rec_stru.h	/^    char date_paid          [7];$/;"	m	struct:clients
dberrors	cdata.h	/^enum dberrors {$/;"	g
dbfiles	cbs_file_specs.h	/^const char *dbfiles [] = {$/;"	v
denames	cbs_data_el_names.h	/^const char *denames [] = {$/;"	v
elements	cbs.h	/^typedef enum elements {$/;"	g
elements	cbs_data_el_list.h	/^typedef enum elements	{$/;"	g
ellen	cbs_data_el_len.h	/^const int ellen [] = {$/;"	v
elmask	cbs_data_el_displch.h	/^const char *elmask [] =	{$/;"	v
eltype	cbs_data_el_displch.h	/^const char eltype [] = "ZAAAANNCZACZACCCND";$/;"	v
endnode	btree.h	/^    RPTR endnode;            \/* next unassigned node *\/$/;"	m	struct:treehdr
expense	cbs_file_rec_stru.h	/^    char expense           [10];$/;"	m	struct:clients
f_assignments	cbs_file_ct.h	/^const ELEMENT f_assignments [] = {$/;"	v
f_clients	cbs_file_ct.h	/^const ELEMENT f_clients [] = {$/;"	v
f_consultants	cbs_file_ct.h	/^const ELEMENT f_consultants [] = {$/;"	v
f_projects	cbs_file_ct.h	/^const ELEMENT f_projects [] = {$/;"	v
fhdr	datafile.h	/^typedef struct fhdr {$/;"	s
file_ele	cbs_file_ct.h	/^const ELEMENT *file_ele [] = {$/;"	v
files	cbs.h	/^typedef enum files {$/;"	g
files	cbs_file_specs.h	/^typedef enum files {$/;"	g
firs_record	datafile.h	/^    RPTR firs_record;$/;"	m	struct:fhdr
hours	cbs_file_rec_stru.h	/^    char hours              [3];$/;"	m	struct:clients
index_ele	cbs_index_specs.h	/^const ELEMENT **index_ele [] = {$/;"	v
key0	btree.h	/^    RPTR key0;      \/* node # of keys < 1st key this node   *\/$/;"	m	struct:treenode
keyct	btree.h	/^    int keyct;      \/* number of keys *\/$/;"	m	struct:treenode
keylength	btree.h	/^    int keylength;           \/* length of a key      *\/$/;"	m	struct:treehdr
keyspace	btree.h	/^    char keyspace [NODE - ((sizeof(int) * 2) + (ADR * 4))];$/;"	m	struct:treenode
leftmost	btree.h	/^    RPTR leftmost;           \/* left-most node       *\/$/;"	m	struct:treehdr
lfsib	btree.h	/^    RPTR lfsib;     \/* left sibling node *\/$/;"	m	struct:treenode
locked	btree.h	/^    int locked;              \/* if btree is locked   *\/$/;"	m	struct:treehdr
m	btree.h	/^    int m;                   \/* max keys\/node        *\/$/;"	m	struct:treehdr
next_record	datafile.h	/^    RPTR next_record;$/;"	m	struct:fhdr
nonleaf	btree.h	/^    int nonleaf;    \/* 0 if leav, 1 if non-leaf *\/$/;"	m	struct:treenode
payment	cbs_file_rec_stru.h	/^    char payment           [10];$/;"	m	struct:clients
phone	cbs.h	/^	char phone [11];$/;"	m	struct:clients
phone	cbs_file_rec_stru.h	/^    char phone             [11];$/;"	m	struct:clients
prntnode	btree.h	/^    RPTR prntnode;  \/* parent node *\/$/;"	m	struct:treenode
project_name	cbs.h	/^	char project_name [26];$/;"	m	struct:projects
project_name	cbs_file_rec_stru.h	/^    char project_name      [26];$/;"	m	struct:clients
project_name	cbs_file_rec_stru.h	/^    char project_name      [26];$/;"	m	struct:projects
project_no	cbs.h	/^	char project_no [6];$/;"	m	struct:assignments
project_no	cbs.h	/^	char project_no [6];$/;"	m	struct:projects
project_no	cbs_file_rec_stru.h	/^	char project_no         [6];$/;"	m	struct:assignments
project_no	cbs_file_rec_stru.h	/^    char project_no         [6];$/;"	m	struct:clients
project_no	cbs_file_rec_stru.h	/^    char project_no         [6];$/;"	m	struct:projects
projects	cbs.h	/^struct projects {$/;"	s
projects	cbs_file_rec_stru.h	/^struct projects {$/;"	s
rate	cbs.h	/^	char rate [6];$/;"	m	struct:assignments
rate	cbs_file_rec_stru.h	/^    char rate               [6];$/;"	m	struct:assignments
rate	cbs_file_rec_stru.h	/^    char rate               [6];$/;"	m	struct:clients
record_length	datafile.h	/^    int record_length;$/;"	m	struct:fhdr
rightmost	btree.h	/^    RPTR rightmost;          \/* right-most node      *\/$/;"	m	struct:treehdr
rised_node	btree.h	/^    RPTR rised_node;         \/* nexe released node   *\/$/;"	m	struct:treehdr
rootnode	btree.h	/^    RPTR rootnode;           \/* root node number     *\/$/;"	m	struct:treehdr
rtsib	btree.h	/^    RPTR rtsib;     \/* right sibling node *\/$/;"	m	struct:treenode
spil	btree.h	/^    char spil [MXKEYLEN]; \/* for insertion excess *\/$/;"	m	struct:treenode
state	cbs.h	/^	char state [3];$/;"	m	struct:clients
state	cbs_file_rec_stru.h	/^    char state              [3];$/;"	m	struct:clients
treehdr	btree.h	/^typedef struct treehdr {$/;"	s
treenode	btree.h	/^typedef struct treenode {$/;"	s
x1_assignments	cbs_index_specs.h	/^const ELEMENT x1_assignments [] = {$/;"	v
x1_clients	cbs_index_specs.h	/^const ELEMENT x1_clients [] = {$/;"	v
x1_consultants	cbs_index_specs.h	/^const ELEMENT x1_consultants [] = {$/;"	v
x1_projects	cbs_index_specs.h	/^const ELEMENT x1_projects [] = {$/;"	v
x2_assignments	cbs_index_specs.h	/^const ELEMENT x2_assignments [] = {$/;"	v
x3_assignments	cbs_index_specs.h	/^const ELEMENT x3_assignments [] = {$/;"	v
x_assignments	cbs_index_specs.h	/^const ELEMENT *x_assignments [] = {$/;"	v
x_clients	cbs_index_specs.h	/^const ELEMENT *x_clients [] = {$/;"	v
x_consultants	cbs_index_specs.h	/^const ELEMENT *x_consultants [] = {$/;"	v
x_projects	cbs_index_specs.h	/^const ELEMENT *x_projects [] = {$/;"	v
zip	cbs.h	/^	char zip [9];$/;"	m	struct:clients
zip	cbs_file_rec_stru.h	/^    char zip                [6];$/;"	m	struct:clients
